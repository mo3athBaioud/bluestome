package com.autohome;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.StringTokenizer;

import org.htmlparser.Node;
import org.htmlparser.NodeFilter;
import org.htmlparser.Parser;
import org.htmlparser.Tag;
import org.htmlparser.filters.HasAttributeFilter;
import org.htmlparser.filters.NodeClassFilter;
import org.htmlparser.filters.OrFilter;
import org.htmlparser.tags.CompositeTag;
import org.htmlparser.tags.Div;
import org.htmlparser.tags.ImageTag;
import org.htmlparser.tags.LinkTag;
import org.htmlparser.tags.TableTag;
import org.htmlparser.tags.Span;
import org.htmlparser.util.NodeList;

import com.chinamilitary.bean.Article;
import com.chinamilitary.bean.ArticleDoc;
import com.chinamilitary.bean.ImageBean;
import com.chinamilitary.bean.LinkBean;
import com.chinamilitary.bean.PicfileBean;
import com.chinamilitary.bean.ResultBean;
import com.chinamilitary.bean.WebsiteBean;
import com.chinamilitary.dao.ArticleDao;
import com.chinamilitary.dao.ImageDao;
import com.chinamilitary.dao.PicFileDao;
import com.chinamilitary.dao.WebSiteDao;
import com.chinamilitary.factory.DAOFactory;
import com.chinamilitary.memcache.MemcacheClient;
import com.chinamilitary.test.TestHttpClient;
import com.chinamilitary.util.CacheUtils;
import com.chinamilitary.util.CommonUtil;
import com.chinamilitary.util.HttpClientUtils;
import com.chinamilitary.util.IOUtil;
import com.chinamilitary.util.StringUtils;
import com.common.Constants;
import com.utils.FileUtils;

public class IndexParser {

	static String URL_ = "http://www.autohome.com.cn/";
	
	static String IMAGE_URL = "http://car.autohome.com.cn/pic/index.html";
	
	static String CAR_HOME_URL = "http://car.autohome.com.cn";
	
	//type = 1 价格
	static String PRICE_URL_TMP = "http://car.autohome.com.cn/LeftMenu/List.aspx?typeId=1&isSubPage=0&brandId=0&fctId=0&seriesId=0";
	static String SHORT_PRICE_URL_TMP = "http://car.autohome.com.cn/price/brand-{id}.html";
	
	//type = 2 图片
	static String IMAGE_URL_TMP = "http://car.autohome.com.cn/LeftMenu/List.aspx?typeId=2&isSubPage=0&brandId=0&fctId=0&seriesId=0";
	static String SHORT_IMAGE_URL_TMP = "http://car.autohome.com.cn/pic/brand-{id}.html";
	
	//type = 3 视频
	static String VIDEO_URL_TMP = "http://car.autohome.com.cn/LeftMenu/List.aspx?typeId=3&isSubPage=0&brandId=0&fctId=0&seriesId=0";	
	static String SHORT_VIDEO_URL_TMP = "http://car.autohome.com.cn/video/brand-{id}.html";
	
	static String URL = "http://www.autohome.com.cn";

	static Integer D_PARENT_ID = 1500;

	static String PIC_SAVE_PATH = Constants.FILE_SERVER;
	
	final static String FILE_SERVER = Constants.FILE_SERVER;

	static List<LinkBean> LINKLIST = new ArrayList<LinkBean>();

	static List<Article> ARTICLELIST = new ArrayList<Article>();

	static HashMap<String, LinkBean> LINKHASH = new HashMap<String, LinkBean>();
	
	static HashMap<String, String> URLHASH = new HashMap<String, String>();

	static MemcacheClient client = MemcacheClient.getInstance();

	static ArticleDao articleDao = DAOFactory.getInstance().getArticleDao();

	static WebSiteDao webSiteDao = DAOFactory.getInstance().getWebSiteDao();

	static ImageDao imageDao = DAOFactory.getInstance().getImageDao();

	static PicFileDao picFiledao = DAOFactory.getInstance().getPicFileDao();

	/**
	 * 获取分类链接
	 * 微型车
	 * 小型车
	 * 紧凑型车
	 * 中型车
	 * @param url
	 * @throws Exception
	 */
	static void catalog(String url) throws Exception { // WebsiteBean bean
		Parser parser = new Parser();
		parser.setURL(url);
		parser.setEncoding("gb2312");
		NodeFilter fileter = new NodeClassFilter(Div.class);
		NodeList list = parser.extractAllNodesThatMatch(fileter)
				.extractAllNodesThatMatch(
						new HasAttributeFilter("class", "auto_car_nav"));

		if (null != list && list.size() > 0) {
			Div div = (Div) list.elementAt(0);
			Parser p2 = new Parser();
			p2.setInputHTML(div.toHtml());
			NodeFilter linkFilter = new NodeClassFilter(LinkTag.class);
			NodeList linkList = p2.extractAllNodesThatMatch(linkFilter);
			if (linkList != null && linkList.size() > 0) {
				WebsiteBean tmp = null;
				for (int i = 0; i < linkList.size(); i++) {
					LinkTag link = (LinkTag) linkList.elementAt(i);
					if(null != link.getLinkText() && !"".equalsIgnoreCase(link.getLinkText())){
//					if (link.getLink().endsWith(".html")) {
						System.out.println(link.getLinkText());
						tmp = new WebsiteBean();
						tmp.setName(link.getLinkText());
						if (!link.getLink().startsWith("http://")) {
							System.out.println(URL + link.getLink() + "\n");
							tmp.setUrl(URL + link.getLink());
						} else {
							System.out.println(link.getLink() + "\n");
							tmp.setUrl(link.getLink());
						}
//						tmp.setParentId(D_PARENT_ID);
//						boolean b = webSiteDao.insert(tmp);
//						if (b) {
//							client.add(tmp.getUrl(), tmp.getUrl());
//							System.out.println("成功");
//						} else {
//							System.out.println("失败");
//						}
//					}
					}
				}
			}
			if (null != p2)
				p2 = null;
		}
		if (null != parser)
			parser = null;
	}
	
	/**
	 * 获取汽车按名字分类
	 * @param url
	 * @throws Exception
	 */
	/*  分类链接中会调用如下js方法OpenBrand(brandId,typeId)，其中主要是对typeId为类型参数，
	 *  typeId:1:价格,2:图片,3:视频
	 *  brandId【品牌】:分组Id
	 */
	static void catCatalogList(String url) throws Exception { // WebsiteBean bean
		String body = HttpClientUtils.getResponseBody(url);
		if (null != body && !"".equalsIgnoreCase(body)) {
			//对正文的内容进行切分
			String[] bodys = body.split("\r\n");
			if(bodys.length == 0){
				return;
			}
			String tmp = bodys[0].replace("document.writeln(\"", "").replace("\");", "").replace("document.write(\"", "").replace("'", "\"");
			Parser p2 = new Parser();
			p2.setInputHTML(tmp);
			NodeFilter linkFilter = new NodeClassFilter(Div.class);
			NodeList linkList = p2.extractAllNodesThatMatch(linkFilter).extractAllNodesThatMatch(
					new HasAttributeFilter("class", "p1"));
			if (linkList != null && linkList.size() > 0) {
				for (int i = 0; i < linkList.size(); i++) {
					Div sub = (Div) linkList.elementAt(i);
					int subCount = sub.getChildCount();
					if(subCount == 3){
						if(sub.getChild(2) instanceof LinkTag){
							LinkTag lt = (LinkTag)sub.getChild(2);
							if(lt.getLinkText().indexOf("(") != -1){
								int start = lt.getLinkText().lastIndexOf("(");
								URLHASH.put(lt.getLinkText().substring(0,start),lt.getLink());
							}
//							StringTokenizer st = new StringTokenizer(lt.getLinkText());
//							while (st.hasMoreTokens()) {
//						         System.out.println(st.nextToken() + "|"+lt.getLink());
//						         HttpClientUtils.getResponseBody(CAR_HOME_URL+lt.getLink());
//						         break;
//						     }
						}
					}
				}
			}
			if (null != p2)
				p2 = null;
		}
	}
	
	/**
	 * 获取分类下的分页信息
	 * 
	 * @param url
	 * @param attribute
	 * @param value
	 * @return
	 * @throws Exception
	 */
	static ResultBean hasPaging(String url, String cls, String value)
			throws Exception {
		boolean b = false;
		ResultBean result = new ResultBean();
		Parser parser = new Parser();
		parser.setURL(url);

		// 获取指定ID的DIV内容
		NodeFilter filter = new NodeClassFilter(Div.class);
		NodeList list = parser.extractAllNodesThatMatch(filter)
				.extractAllNodesThatMatch(new HasAttributeFilter(cls, value));
		if (list != null && list.size() > 0) {
			Parser p2 = new Parser();
			p2.setInputHTML(list.toHtml());

			NodeFilter filter2 = new NodeClassFilter(LinkTag.class);
			NodeList list2 = p2.extractAllNodesThatMatch(filter2);
			if (null != list && list2.size() > 0) {
				String tmp = null;
				LinkBean l1 = null;
				for (int i = 0; i < list2.size(); i++) {
					l1 = new LinkBean();
					LinkTag link2 = (LinkTag) list2.elementAt(i);
					if (!link2.getLink().startsWith("http://")) {
						if(link2.getLink().equalsIgnoreCase("#")){
							tmp = url;
						}else{
							tmp = URL_ + link2.getLink();
						}
					} else {
						tmp = link2.getLink();
					}
					tmp = tmp.replace("&amp;", "&");
					l1.setLink(tmp);
					l1.setTitle(link2.getLinkText());
					result.put(tmp, l1);
				}
				result.setBool(true);
			}else{
				LinkBean l1 = new LinkBean();
				l1.setLink(url);
				result.put(url, l1);
				result.setBool(true);
			}
			if (null != p2)
				p2 = null;
		} else {
			LinkBean l1 = new LinkBean();
			l1.setLink(url);
			result.put(url, l1);
			result.setBool(true);
		}
		return result;
	}

	/**
	 * 获取分类下的分页信息
	 * 
	 * @param url
	 * @param attribute
	 * @param value
	 * @return
	 * @throws Exception
	 */
	static ResultBean hasPaging2(String url) throws Exception {
		boolean b = false;
		ResultBean result = new ResultBean();
		Parser parser = new Parser();
		parser.setURL(url);

		// 获取指定ID的DIV内容
		NodeFilter filter = new NodeClassFilter(Span.class);
		NodeList list = parser.extractAllNodesThatMatch(filter)
				.extractAllNodesThatMatch(
						new HasAttributeFilter("class", "num fl TC"));
		int num = 0;
		if (list != null && list.size() > 0) {
			Parser p2 = new Parser();
			p2.setInputHTML(list.toHtml());

			NodeFilter filter2 = new NodeClassFilter(LinkTag.class);
			NodeList list2 = p2.extractAllNodesThatMatch(filter2);
			LinkTag link = (LinkTag) list2.elementAt(list2.size() - 1);
			if (null != link) {
				try {
					num = Integer.valueOf(link.getLinkText());
				} catch (Exception e) {
					num = 1;
				}
				LinkBean lbean = null;
				for (int i = 1; i < num + 1; i++) {
					String tmp = url;
					lbean = new LinkBean();
					if (i == 1) {
						lbean.setLink(url);
					} else {
						tmp = tmp.replace(".html", "_" + i + ".html");
						lbean = new LinkBean();
						lbean.setLink(tmp);
					}
					result.put(tmp, lbean);
				}
				result.setBool(true);
			}
			if (null != p2)
				p2 = null;
		} else {
			result.setBool(b);
		}
		return result;
	}

	/**
	 * 获取指定URL下的源码
	 * 
	 * @param url1
	 * @return
	 */
	public static String ViewSourceFrame(String url1) throws Exception {
		String url = url1;
		String linesep = System.getProperty("line.separator");
		String htmlLine;
		String htmlSource = "";
		java.net.URL source = new URL(url);
		InputStream in = new BufferedInputStream(source.openStream());
		BufferedReader br = new BufferedReader(new InputStreamReader(in));
		while ((htmlLine = br.readLine()) != null) {
			htmlSource = htmlSource + htmlLine + linesep;
		}
		return htmlSource;

	}

	/**
	 * 获取指定列表中页面源码
	 * 
	 * @param webList
	 */
	static void initHTML(List<WebsiteBean> webList) {
		Long start = System.currentTimeMillis();
		for (WebsiteBean bean : webList) {
			try {
				Long start1 = System.currentTimeMillis();
				String content = ViewSourceFrame(bean.getUrl());
				if (null != content && !"".equalsIgnoreCase(content)) {
					// processWithDoc(bean.getId(), content);
					Long end1 = System.currentTimeMillis();
					System.out.println("单条耗时:" + (end1 - start1) + "长度："
							+ content.getBytes().length);
				}
			} catch (Exception e) {
				System.out.println("Exception:" + e.getMessage());
				continue;
			}
		}
		Long end = System.currentTimeMillis();
		System.out.print("总耗时:" + (end - start));
	}

	/**
	 * 获取分类下数据
	 * 
	 * @param link
	 * @param webId
	 * @throws Exception
	 */
	public static void secondURL(LinkBean link, int webId) throws Exception {
		Parser parser = new Parser();
		parser.setURL(link.getLink());
		parser.setEncoding("GB2312");

		// 获取指定ID的TableTag内容
		NodeFilter filter = new NodeClassFilter(Span.class);
		NodeList list = parser.extractAllNodesThatMatch(filter)
				.extractAllNodesThatMatch(
						new HasAttributeFilter("class", "title fs12 fl TC")); //pic-list fl of
		if (list != null && list.size() > 0) {
			Parser p2 = null;
			for (int i = 0; i < list.size(); i++) {
				Article article = null;
				String url = null;
				Span ltmp = (Span) list.elementAt(i);
				NodeList tmp = ltmp.getChildren();
				// System.out.println("*************Start****************");
				// for(int j=0;j<tmp.size();j++){
				// Node node = (Node)tmp.elementAt(j);
				// System.out.println(j+":"+node.toHtml());
				// }
				// System.out.println("*************End****************");

				if (null != tmp && tmp.size() > 0) {
					LinkTag tmplink = (LinkTag) tmp.elementAt(1);
					if (null != tmplink) {
						if (!tmplink.getLink().startsWith("http://")) {
							url = URL + tmplink.getLink();
						} else {
							url = tmplink.getLink();
						}
						String tmpurl = getRealArticleURL(url);
						if (null == client.get(url)) {
							article = new Article();
							article.setWebId(webId);
							article.setArticleUrl(url);
							article.setText("NED"); // NED_WALLCOO
							article.setIntro("NN");
							if (null != tmpurl) {
								article.setActicleRealUrl(tmpurl);
							}
							article.setTitle(tmplink.getLinkText());
//							System.out.println("*****************Start***************");
//							System.out.println("ArticleUrl:"+article.getArticleUrl());
//							System.out.println("ActicleXmlUrl:"+article.getActicleXmlUrl());
//							System.out.println("Title:"+article.getTitle());
//							System.out.println("Text:"+article.getText());
//							System.out.println("*****************End***************\n");
							
							int key = articleDao.insert(article);
							if (key > 0) {
								System.out.print(tmplink.getLinkText() + "\t|"
										+ url+"\t"+tmpurl);
								client.add(url, url);
							}
						} else {
							System.err.println(">> 已存在相同的内容 ["
									+ tmplink.getLinkText() + "]");
						}

					}
					if (null != p2)
						p2 = null;
				}
			}
		}
		if (null != parser)
			parser = null;
	}

	static String getRealArticleURL(String url1) throws Exception {
		String url = null;

		Parser p1 = new Parser();
		p1.setURL(url1);

		NodeFilter filter = new NodeClassFilter(CompositeTag.class);
		NodeList list = p1.extractAllNodesThatMatch(filter)
				.extractAllNodesThatMatch(
						new HasAttributeFilter("class", "abot"));

		if (null != list && list.size() > 0) {
			LinkTag link = (LinkTag) list.elementAt(0);
			System.out.println(link.getLinkText() + "|" + link.getLink());
			if (!link.getLink().startsWith("http://")) {
				url = URL + link.getLink();
			} else {
				url = link.getLink();
			}
		}

		if (null != p1)
			p1 = null;
		return url;

	}

	/**
	 * 获取图片地址下数据
	 * 
	 * @param link
	 * @param webId
	 * @throws Exception
	 */
	public static boolean getImage(Article article) throws Exception {
		boolean b = true;
		ResultBean result = hasPaging(article.getActicleRealUrl(), "class",
				"pg");
		if (result.isBool()) {
			Iterator it = result.getMap().keySet().iterator();
			while (it.hasNext()) {
				String key = (String) it.next();
				System.out.println("文章地址:"+key);
				LinkBean link = result.getMap().get(key);
				if(!getImage(link,article.getTitle(),article.getId())){
					b = false;
					break;
				}
				break;
			}
		}

		return b;
	}

	/**
	 * 获取分类下数据
	 * 
	 * @param link
	 * @param webId
	 * @throws Exception
	 */
	public static boolean getImage(LinkBean link,String title, int artId) throws Exception {

		Parser parser = new Parser();
		parser.setURL(link.getLink());
		parser.setEncoding("UTF-8");
		boolean resultB = true;
		// 获取指定ID的TableTag内容
		NodeFilter filter = new NodeClassFilter(CompositeTag.class);
		NodeList list = parser
				.extractAllNodesThatMatch(filter)
				.extractAllNodesThatMatch(new HasAttributeFilter("class", "picbd"));
		if (null != list && list.size() > 0) {
			Parser p2 = null;
			String length = "0";
			int size = 0;
			for (int i = 0; i < list.size(); i++) {
				LinkTag ltmp = (LinkTag) list.elementAt(i);
				ImageBean imgBean = null;
				String url = null;
				String imgSrc = null;
				if (!ltmp.getLink().startsWith("http://")) {
					url = URL + ltmp.getLink();
				} else {
					url = ltmp.getLink();
				}
				imgSrc = getImageURL(url);
				
				if (null != imgSrc) {
					if (null == client.get(url)) {
						imgBean = new ImageBean();
						imgBean = new ImageBean();
						imgBean.setArticleId(artId);
						imgBean.setHttpUrl(imgSrc);
						NodeList tmp = ltmp.getChildren();
						if (tmp != null && tmp.size() > 0) {
							ImageTag imgTag = (ImageTag) tmp.elementAt(0);
							if (null != imgTag.getImageURL())
								imgBean.setImgUrl(imgTag.getImageURL());
							if (null != imgTag.getAttribute("alt"))
								imgBean
										.setTitle(imgTag
												.getAttribute("alt"));
							else
								imgBean.setTitle(title);
						}
						imgBean.setLink("NED");
						try {
							size = Integer.parseInt(length);
							imgBean.setFileSize(Long.valueOf(size));
							imgBean.setStatus(3);
						} catch (Exception e) {
							e.printStackTrace();
							System.err.println(">> IMAGE SIZE ERROR");
							size = 0;
							imgBean.setFileSize(0l);
							imgBean.setStatus(1);
						}
//						System.out.println("Title:"+imgBean.getTitle());
//						System.out.println("ArticleId:"+imgBean.getArticleId());
//						System.out.println("大图地址:"+imgBean.getHttpUrl());
//						System.out.println("小图地址:"+imgBean.getImgUrl());
						
						int key = imageDao.insert(imgBean);
						if (key > 0) {
							System.out.println(imgBean.getTitle() + "\t|"+ url);
							client.add(url, url);
						}
					} else {
						System.err.println(">> 已存在相同的内容 ["
								+ ltmp.getLinkText() + "]");
					}
				} else {
					resultB = false;
					break;
				}

				if (null != p2)
					p2 = null;
			}
		}

		return resultB;
	}

	/**
	 * 获取图片实际地址
	 * 
	 * @param url
	 * @return
	 */
	static String getImageURL(String url) {
		String result = null;
		try {
			Parser p1 = new Parser();
			p1.setURL(url);

			NodeFilter filter = new NodeClassFilter(CompositeTag.class);
			NodeList list = p1.extractAllNodesThatMatch(filter)
					.extractAllNodesThatMatch(
							new HasAttributeFilter("class", "abpic"));

			if (null != list && list.size() == 1) {
				LinkTag link = (LinkTag) list.elementAt(0);
				result = link.getLink();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

	/**
	 * 获取图片地址下数据
	 * 
	 * @param link
	 * @param webId
	 * @throws Exception
	 */
	public static void getImage(LinkBean link, int webId, int articleId)
			throws Exception {
		Parser parser = new Parser();
		parser.setURL(link.getLink());
		parser.setEncoding("UTF-8");
		String length = "0";
		int size = 0;
		// 获取指定ID的TableTag内容
		NodeFilter filter = new NodeClassFilter(TableTag.class);
		NodeList list = parser.extractAllNodesThatMatch(filter)
				.extractAllNodesThatMatch(
						new HasAttributeFilter("id", "DataList1"));
		if (list != null && list.size() > 0) {
			NodeFilter linkFilter = new NodeClassFilter(LinkTag.class);
			NodeFilter imageFilter = new NodeClassFilter(ImageTag.class);
			OrFilter lastFilter = new OrFilter();
			lastFilter
					.setPredicates(new NodeFilter[] { linkFilter, imageFilter });
			Parser p2 = new Parser();
			p2.setInputHTML(list.toHtml());
			p2.setEncoding("UTF-8");
			NodeList list4 = p2.parse(lastFilter);
			if (list4 != null || list4.size() > 0) {
				for (int i = 0; i < list4.size(); i++) {
					// 地址
					if (list4.elementAt(i) instanceof LinkTag) {
						LinkTag nl = (LinkTag) list4.elementAt(i);
						NodeList cnl = nl.getChildren();
						if (cnl != null && cnl.size() > 0) {
							// 小图 可能存在部分图片无法访问，需要判断
							ImageBean imgBean = null;
							if (cnl.elementAt(0) instanceof ImageTag) {
								ImageTag it = (ImageTag) cnl.elementAt(0);
								String url = IMAGE_URL
										+ getImageUrl(nl.getLink());
								if (null == client.get(url)) {
									length = HttpClientUtils
											.getHttpHeaderResponse(url,
													"Content-Length");
									imgBean = new ImageBean();
									imgBean.setArticleId(articleId);
									imgBean.setHttpUrl(url);
									imgBean.setImgUrl(it.getImageURL());
									imgBean.setTitle(it.getAttribute("alt"));
									try {
										size = Integer.parseInt(length);
										imgBean.setFileSize(Long.valueOf(size));
										imgBean.setStatus(3);
									} catch (Exception e) {
										e.printStackTrace();
										System.err
												.println(">> IMAGE SIZE ERROR");
										size = 0;
										imgBean.setFileSize(0l);
										imgBean.setStatus(1);
									}
									imgBean.setLink("NED");
									imgBean.setOrderId(i);
									imgBean.setArticleId(articleId);
									// HttpClientUtils
									int result = imageDao.insert(imgBean);
									if (result > 0) {
										System.out.println(">> add article["
												+ articleId + "] image id["
												+ result + "] to DB");
										imgBean.setId(result);
										client.add(url, url);
									} else {
										System.err.println(">> 未添加[" + url
												+ "]到数据库中");
									}
								} else {
									System.err.println(">> 缓存中已存在相同的内容 ["
											+ nl.getLink() + "]");
								}
							}
						}
					}
					Thread.sleep(1000);
				}
			}
		}
	}

	static String getImageUrl(String link) {
		int start = link.indexOf("=");
		int end = link.length();
		String imgUrl = link.substring(start + 1, end);
		return imgUrl;
	}

	static String getTitle(String title, String defaultTitle) {
		if (null == title || "".equalsIgnoreCase(title)) {
			return defaultTitle + ":" + System.currentTimeMillis();
		}
		return title;
	}

	static void init() {
		try {
			List<WebsiteBean> webList = webSiteDao.findByParentId(701);
			for (WebsiteBean bean : webList) {
				List<Article> articleList = articleDao
						.findByWebId(bean.getId());
				for (Article article : articleList) {
					if (null == client.get(article.getArticleUrl())) {
						client.add(article.getArticleUrl(), article
								.getArticleUrl());
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	static void update() throws Exception {
		List<WebsiteBean> webList = webSiteDao.findByParentId(D_PARENT_ID);
		for (WebsiteBean bean : webList) {
			ResultBean result = hasPaging2(bean.getUrl());
			if (result.isBool()) {
				Iterator it = result.getMap().keySet().iterator();
				System.out.println("分页数量:"+result.getMap().size());
				while (it.hasNext()) {
					String key = (String) it.next();
					LinkBean link = result.getMap().get(key);
					System.out.println("key:"+key);
					try {
						secondURL(link, bean.getId());
					} catch (Exception e) {
						e.printStackTrace();
						System.out.println("key:" + key);
						continue;
					}
				}
			}
		}
	}

	public static void main(String[] args) {
		// init();
		try {
//			catalog(URL);
//			PRICE_URL_TMP,IMAGE_URL_TMP,VIDEO_URL_TMP
			catCatalogList(PRICE_URL_TMP);
			catCatalogList(IMAGE_URL_TMP);
			catCatalogList(VIDEO_URL_TMP);
			Iterator it = URLHASH.keySet().iterator();
			String[] hsname = new String[URLHASH.size()];
			List<String> ids = new ArrayList<String>();
			int i = 0;
			while(it.hasNext()){
				String key = (String)it.next();
				hsname[i] = key;
				i++;
			}
			
//			System.out.println(" >> 数量:"+URLHASH.size());
			Arrays.sort(hsname);
			
			for(String hsnam:hsname){
				String id = getIdFromURL(URLHASH.get(hsnam));
				System.out.println(" >> "+hsnam+"|\t"+SHORT_VIDEO_URL_TMP.replace("{id}", id));
				System.out.println(" >> "+hsnam+"|\t"+SHORT_PRICE_URL_TMP.replace("{id}", id));
				System.out.println(" >> "+hsnam+"|\t"+SHORT_IMAGE_URL_TMP.replace("{id}", id));
//				ids.add(id);
			}
			
//			System.out.println(" >> id:"+ids.size());
			URLHASH.clear();
			ids.clear();
			System.exit(0);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	static String getIdFromURL(String url){
		String id = "-1";
		int start = url.lastIndexOf("-");
		int end = url.lastIndexOf(".");
		id = url.substring(start+1,end);
//		System.out.println(">>"+id);
		
		return id;
	}

	static void loadImg() throws Exception {
		List<WebsiteBean> webList = webSiteDao.findByParentId(D_PARENT_ID);
		for (WebsiteBean bean : webList) {
			List<Article> list = articleDao.findByWebId(bean.getId(),"NED");
//			List<Article> list = articleDao.findByWebId(bean.getId());
			System.out.println(bean.getId()+"|文章数量"+list.size());
			for (Article art : list) {
//				List<ImageBean> imgList = imageDao.findImage(art.getId());
//				if(imgList.size() == 0){
//					art.setText("NED");
//					if (articleDao.update(art)) {
//						System.out
//								.println("更新记录[" + art.getTitle() + "|"+art.getId()+"]成功");
//					}
//				}else{
					if (getImage(art)) {
						if(!art.getText().equalsIgnoreCase("FD")){
							art.setText("FD");
							if (articleDao.update(art)) {
								System.out
										.println("更新记录[" + art.getTitle() + "|"+art.getId()+"]成功");
							}
						}
					}
//				}
//				break;
			}
		}
	}


	static void imgDownload() throws Exception {
		List<WebsiteBean> webList = webSiteDao.findByParentId(D_PARENT_ID);
		for (WebsiteBean bean : webList) {
			List<Article> list = articleDao.findByWebId(bean.getId(),"FD");
			System.out.println(">> 网站["+bean.getId()+"|"+bean.getName()+"|"+bean.getUrl()+"]\t下文章数量"+list.size());
			for (Article art : list) {
				List<ImageBean> imglist = imageDao.findImage(art.getId());
				System.out.println(">> 文章["+art.getId()+"|"+art.getTitle()+"]\t下的图片数量"+imglist.size());
				for (ImageBean img : imglist) {
					if(img.getLink().equalsIgnoreCase("NED")){
						if (download(img)) {
							img.setStatus(1);
							img.setLink("FD");
							if (imageDao.update(img)) {
								System.out.println(">> 更新图片对象[" + art.getId() + "|"+img.getId()+"]\t成功");
							}
						}
					}
				}
			}
		}
		
	}

	static boolean download(ImageBean imgBean) {
		PicFileDao dao = null;
		PicfileBean bean = null;
		dao = DAOFactory.getInstance().getPicFileDao();
		bean = new PicfileBean();
		String s_fileName = imgBean.getImgUrl().substring(
				imgBean.getImgUrl().lastIndexOf("/") + 1,
				imgBean.getImgUrl().length());
		String fileName = imgBean.getHttpUrl().substring(
				imgBean.getHttpUrl().lastIndexOf("/") + 1,
				imgBean.getHttpUrl().length());
		s_fileName = s_fileName.replace(".", "_s.");
		try {
			if (client.get(CacheUtils.getShowImgKey(PIC_SAVE_PATH
					+  StringUtils.gerDir(String.valueOf(imgBean.getArticleId()))
					+ imgBean.getArticleId() + File.separator
					+ fileName.replace(".", "_s."))) == null) {
				IOUtil.createPicFile(imgBean.getImgUrl(), PIC_SAVE_PATH
						+  StringUtils.gerDir(String.valueOf(imgBean.getArticleId()))
						+ imgBean.getArticleId() + File.separator
						+ fileName.replace(".", "_s."));
			}

			if (client.get(CacheUtils.getBigPicFileKey(PIC_SAVE_PATH
					+  StringUtils.gerDir(String.valueOf(imgBean.getArticleId()))
					+ imgBean.getArticleId() + File.separator + fileName)) == null) {
				IOUtil.createPicFile(imgBean.getHttpUrl(), PIC_SAVE_PATH
						+  StringUtils.gerDir(String.valueOf(imgBean.getArticleId()))
						+ imgBean.getArticleId() + File.separator + fileName);
			}
			bean.setArticleId(imgBean.getArticleId());
			bean.setImageId(imgBean.getId());
			bean.setTitle(imgBean.getTitle());
			bean.setSmallName(File.separator  + StringUtils.gerDir(String.valueOf(imgBean.getArticleId()))
					+ imgBean.getArticleId() + File.separator + s_fileName);
			bean.setName( File.separator  + StringUtils.gerDir(String.valueOf(imgBean.getArticleId()))
					+ imgBean.getArticleId() + File.separator + fileName);
			bean.setUrl(PIC_SAVE_PATH);
			try {
				boolean b = picFiledao.insert(bean);
				if (b) {
					client.add(CacheUtils.getBigPicFileKey(bean.getUrl()
							+ bean.getName()), bean);
					client.add(CacheUtils.getSmallPicFileKey(bean.getUrl()
							+ bean.getSmallName()), bean);
				} else {
					return false;
				}
			} catch (Exception e) {
				System.out.println("数据库异常,");
				e.printStackTrace();
				return false;
			}
		} catch (IOException e) {
			System.out.println("网络连接，文件IO异常");
			e.printStackTrace();
			return false;
		}
		return true;
	}

	static void movefile() throws Exception{
		List<WebsiteBean> webList = webSiteDao.findByParentId(D_PARENT_ID);
		PicfileBean bean = null;
		for(WebsiteBean website:webList){
			System.out.println(website.getId()+"|"+website.getName()+"|"+website.getUrl());
			List<Article> artList = articleDao.findByWebId(website.getId(), "FD");
			System.out.println("文章数量:"+artList.size());
			for(Article article:artList){
				List<ImageBean> list = imageDao.findImage(article.getId());
				for(ImageBean img:list){
					bean = picFiledao.findByImgIdAndArticleId(img.getId(), article.getId());
					if(null != bean){
						if(moveFile(bean)){
							System.out.println(bean.getId()+"|"+bean.getArticleId()+"|"+bean.getImageId());
							System.out.println("after move file name:"+bean.getName());
							System.out.println("after move file smallName:"+bean.getSmallName());
							System.out.println("-------------------------------------------------------------");
						}
					}
				}
			}
		}
	}
	
	static boolean moveFile(PicfileBean bean) {
		boolean isBig = false;
		boolean isSmall = false;
		int start = bean.getName().lastIndexOf(File.separator)+1;
		int smnStart = bean.getSmallName().lastIndexOf(File.separator)+1;
		String prx = StringUtils.gerDir(String.valueOf(bean.getArticleId()));
		String fileName = prx+bean.getArticleId()+File.separator+bean.getName().substring(start);
		String smallFileName = prx+bean.getArticleId()+File.separator+bean.getSmallName().substring(smnStart);
		String source = bean.getUrl() + bean.getName();
		String smgSource = bean.getUrl() + bean.getSmallName();
		String target = FILE_SERVER+fileName;
		String smgTarget = FILE_SERVER + smallFileName;
		bean.setUrl(FILE_SERVER);
		if(FileUtils.copyFile(source, target)){
			System.out.println(">> 大图成功!!!");
			if(FileUtils.deleteFile(source)){
				System.out.println(">> 删除源大图["+source+"]成功");
			}
			bean.setName(fileName);
			isBig = true;
		}
		
		if(FileUtils.copyFile(smgSource, smgTarget)){
			System.out.println(">> 小图成功!!!");
			if(FileUtils.deleteFile(smgSource)){
				System.out.println(">> 删除源小图["+smgSource+"]成功");
			}
			bean.setSmallName(smallFileName);
			isSmall = true;
		}
		if(isBig){
			if(isBig || isSmall){
				try{
					if(picFiledao.update(bean)){
						System.out.println(">> 更新图片文件["+bean.getId()+"]记录成功!");
					}
				}catch(Exception e){
					e.printStackTrace();
				}
			}
		}
		
		return isBig;
	}
	
	/**
	 * 测试方法
	 * @throws Exception
	 */
	static void test() throws Exception{
		ResultBean result = hasPaging2("http://desk.tpzj.com/html/260/index.html");
		if (result.isBool()) {
			Iterator it = result.getMap().keySet().iterator();
			while (it.hasNext()) {
				String key = (String) it.next();
				System.out.println("key:" + key);
				LinkBean link = (LinkBean) result.getMap().get(key);
				secondURL(link, 0);
			}
		}
		
	}
}
